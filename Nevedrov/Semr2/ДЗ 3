import random


class teplytcha:
    temp: float = 10
    humidity: float = 36.2
    windows: int = 2
    heaters: int = 3
    open_windows: int = 0
    used_heaters: int = 0

    def __init__(self, temp=temp, humidity=humidity, windows=windows, heaters=heaters, open_windows=open_windows,
                 used_heaters=used_heaters):
        self.__is_working = True
        self.__is_activated = False
        self.__is_show_state = False

    def start(self):
        '''Activating object'''
        self.__is_activated = True
        print('Check doc early (use help() command)!')
        while self.__is_working and self.__is_activated:
            if not -15 <= self.temp <= 50 or self.humidity <= 10:
                self.__is_working = False
                self.open_windows = self.windows
                self.used_heaters = self.heaters
            self.temp = self.temp - random.randint(1, 3) + self.used_heaters - 0.5 * self.open_windows
            self.humidity = self.humidity - random.randint(-5, 5) + 2 * self.open_windows - 0.3 * self.used_heaters
            if self.__is_show_state:
                self.print_state()
            teplytcha.__input_command()

    def print_state(self):
        '''Show system state'''
        print(f'''
        State: {'Work' if self.__is_working else 'Broken'}
        Temp : {self.temp} C{chr(176)} 
        Humidity: {self.humidity}%
        Open windows: {self.open_windows}/{self.windows}
        Activated heaters: {self.used_heaters}/{self.heaters}
        ''')

    def __input_command(self):
        command_dict = {'OW': self.__open_window, 'ONH': self.__turn_on_heater, 'OFFH': self.__turn_off_heater,
                        'SS': self.__show_state, 'S': self.__shutdown, 'C': self.__continue, 'help()': self.__help}
        self.is_work = True
        while self.is_work:
            command = input('Enter command: ')
            try:
                command_dict[command]()
            except KeyError:
                print('Wrong command')

    def __open_window(self):
        if self.open_windows < self.windows:
            self.open_windows += 1

    def __turn_on_heater(self):
        if self.used_heaters < self.heaters:
            self.used_heaters += 1

    def __show_state(self):
        self.__is_show_state = not self.__is_show_state

    def __close_window(self):
        if self.open_windows > 0:
            self.open_windows -= 1

    def __turn_off_heater(self):
        if self.used_heaters > 0:
            self.used_heaters -= 1

    def __shutdown(self):
        self.__is_activated = False
        self.is_work = False

    def __continue(self):
        self.is_work = False

    def __help(self):
        print(
            '''
            OW (open window)
                Opens one of windows if all of them aren\'t opened
    
            CW (close_window)
                Close one of windows if all of them aren\'t closed
                
            ONH (turn on heater)
                Activate on one of heaters if all of them aren\'t activated
                
            OFFH (turn on heater)
                Activate on one of heaters if all of them aren\'t activated
            
            SS (show state)
                Prints object state (temp, humidity, open windows, activated heaters) every iteration when activated
                To deactivate use this method again
                
            C (continue)
                Go on next iteration
            
            S (shutdown)
                Stops execution of the program but saves object state  
            '''
        )
        
        
teplytcha = teplytcha()
teplytcha.start()
